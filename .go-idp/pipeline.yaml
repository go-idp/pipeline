name: ci

environment:
  CI: "true"
  EUNOMIA_BUILD_ID: "10000"
  EUNOMIA_BUILD_TIMESTAMP: "1727070237"
  EUNOMIA_CI: "true"
  EUNOMIA_GIT_BRANCH: master
  EUNOMIA_GIT_REPOSITORY: https://github.com/go-idp/pipeline
  EUNOMIA_RUNNER_ARCH: amd64
  EUNOMIA_RUNNER_NAME: IDP CI
  EUNOMIA_RUNNER_OS: Linux
  EUNOMIA_RUNNER_PLATFORM: linux
  EUNOMIA_RUNNER_USER: runner

stages:
  # - name: checkout
  #   jobs:
  #     - name: checkout
  #       steps:
  #         - name: checkout
  #           command: |
  #             # set -x
  #             echo "[$(date))] 认证 ($GITHUB_SERVER_URL)"
  #             git config --global http.${GITHUB_SERVER_URL}.extraheader "AUTHORIZATION: basic "$(echo -n "x-access-token:${GITHUB_TOKEN}" | base64)
  #             echo "[$(date))] 检出 (REPO: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}, DIR: $PWD)"
  #             git clone --progress --depth 1 -b ${GITHUB_REF_NAME} ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY} $PWD

  - name: prepare
    jobs:
      - name: prepare
        steps:
          - name: install go
            command: zmicro package install go

  - name: build
    jobs:
      - name: build
        steps:
          - name: go build
            command: go build -o pipeline ./cmd/pipeline

  - name: test
    jobs:
      - name: test run
        steps:
          - name: examples/run.yaml
            command: ./pipeline run -c $PWD/examples/run.yaml

          - name: examples/github.yaml
            command: |
              WORKDIR=/tmp/go-idp/pipeline
              mkdir -p $WORKDIR && ./pipeline run \
                -c $PWD/examples/github.yaml \
                -w $WORKDIR \
                --allow-env GITHUB_TOKEN \
                --allow-env GITHUB_REF_NAME \
                --allow-env GITHUB_SERVER_URL \
                --allow-env GITHUB_REPOSITORY

          # @TODO cannot test in github action
          # issue: invalid mount config for type "bind": bind source path does not exist: /__w/pipeline/pipeline
          - name: examples/docker.yaml
            command: |
              ./pipeline run \
              -c $PWD/examples/docker.yaml \
              -w /home/runner/work/free-terminal

  # - name: deploy
  #   jobs:
  #     - name: deploy
  #       steps:
  #         - name: docker build
  #           command: |
  #             docker --version
  #             docker info
  #             docker buildx version
  #             pwd
  #             ls -al $RUNNER_WORKSPACE
  #             docker buildx build -t registry.idp.example.com/idp/backend:test-pipeline .

